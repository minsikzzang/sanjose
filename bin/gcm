#!/usr/bin/env ruby

require 'commander/import'

require 'sanjose'

HighLine.track_eof = false # Fix for built-in Ruby
Signal.trap("INT") {} # Suppress backtrace when exiting command

program :version, Sanjose::VERSION
program :description, 'A command-line interface for sending push notifications for Android'

program :help, 'Author', 'Min Kim <minsikzzang@gmail.com>'
program :help, 'Website', 'https://github.com/minsikzzang'
program :help_formatter, :compact

default_command :help

command :push do |c|
  c.syntax = 'gcm push DEVICE [...]'
  c.summary = 'Sends an Google Cloud Message to specified devices'
  c.description = ''

  c.example 'description', 'gcm push <registration_id> -d "{\"foo\":\"bar\"}"" -k "AIzaSyApdin5fMuTSGtW-OTC9gJrm2qz1hJPUzk" -c "Hello, World!"'
  c.option '-k', '--key KEY', 'Google Cloud Message api key'
  c.option '-c', '--collapse_key CK', 'An arbitrary string (such as "Updates Available") that is used to collapse a group of like messages when the device is offline'
  c.option '-r', '--dry_run DRY_RUN', 'It allows developers to test their request without actually sending a message'
  c.option '-t', '--time_to_live TTL', 'How long (in seconds) the message should be kept on GCM storage if the device is offline.'
  c.option '-p', '--restricted_package_name RPN', 'A string containing the package name of your application.'
  c.option '-d', '--data DATA', 'A JSON object whose fields represents the key-value pairs of the message\'s payload data'
  
  c.action do |args, options|
    say_error "One or more device registration_id required" and abort if args.empty?

    @key = options.key    
    say_error "Google Cloud api key is required" and abort unless @key
  
    @data = options.data
    @time_to_live = options.time_to_live
    @collapse_key = options.collapse_key
    @restricted_package_name = options.restricted_package_name
    @dry_run = options.dry_run
    
    client = Sanjose::Client.new
    client.gcm_api_key = @key
    
    notification = Sanjose::Notification.new
    args.each do |device|
      notification.add_device(device)
    end
    
    notification.data = JSON.parse(@data)
    notification.collapse_key = @collapse_key
    notification.dry_run = @dry_run
    notification.restricted_package_name = @restricted_package_name
    notification.time_to_live = @time_to_live
    
    begin
      results = client.push(notification)
    rescue => e
      say_error "Exception sending notification: #{e}" and abort
    end
    
    message_ids = ''
    results.results.each do |result| 
      message_ids += "#{result.message_id}, "
    end
    say_ok "Push notifications successfully sent - multicast id(#{results.multicast_id}), #{results.success} messages(#{message_ids.chomp(", ")}) have sent successfully"
  end
end